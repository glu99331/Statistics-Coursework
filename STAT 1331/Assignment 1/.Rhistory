setwd("C:/Users/gordo/Desktop/Fall 2020 Classes/STAT 1331 - Financial Econometrics/In-Class Code") # set the working directory
setwd("C:/Users/gordo/Desktop/Fall 2020 Classes/STAT 1331 - Financial Econometrics/In-Class Code") # set the working directory
rm(list = ls()) # clear the data environment
setwd("C:/Users/gordo/Desktop/Fall 2020 Classes/STAT 1331 - Financial Econometrics/In-Class Code") # set the working directory
source("generate_plus_test.R") # add functions inside the local R file named generate_plus_test
TT <- 300 # number of observations
#if lambda and rho both != 0, we have reject a lot more, when we shouldn't have!
lam <- 0.9 # determines the degree of serial correlation for y
rho <- 0.9 # determines the degree of serial correlation for x
alpha <- 0.05 # size of the t test
nsim <- 1000 # number of simulations
reject_null <- matrix(FALSE,nrow = nsim, ncol = 1)
for (i in 1:nsim) {
set.seed(124*i) # set the seed for generating data
reject_null[i] <- gen_test(TT, lam, rho, alpha)
}
estimated_size <- sum(reject_null)/nsim
print(estimated_size)
rm(list = ls()) # clear the data environment
setwd("C:/Users/gordo/Desktop/Fall 2020 Classes/STAT 1331 - Financial Econometrics/In-Class Code") # set the working directory
source("generate_plus_test.R") # add functions inside the local R file named generate_plus_test
TT <- 300 # number of observations
#if lambda and rho both != 0, we have reject a lot more, when we shouldn't have!
lam <- 0.9 # determines the degree of serial correlation for y
rho <- 0.9 # determines the degree of serial correlation for x
alpha <- 0.05 # size of the t test
nsim <- 1000 # number of simulations
reject_null <- matrix(FALSE,nrow = nsim, ncol = 1)
for (i in 1:nsim) {
set.seed(124*i) # set the seed for generating data
reject_null[i] <- gen_test(TT, lam, rho, alpha)
}
estimated_size <- sum(reject_null)/nsim
print(estimated_size)
rm(list = ls()) # clear the data environment
setwd("C:/Users/gordo/Desktop/Fall 2020 Classes/STAT 1331 - Financial Econometrics/In-Class Code") # set the working directory
source("generate_plus_test.R") # add functions inside the local R file named generate_plus_test
TT <- 300 # number of observations
#if lambda and rho both != 0, we have reject a lot more, when we shouldn't have!
lam <- 0.9 # determines the degree of serial correlation for y
rho <- 0.9 # determines the degree of serial correlation for x
alpha <- 0.05 # size of the t test
nsim <- 1000 # number of simulations
reject_null <- matrix(FALSE,nrow = nsim, ncol = 1)
for (i in 1:nsim) {
set.seed(124*i) # set the seed for generating data
reject_null[i] <- gen_test(TT, lam, rho, alpha)
}
estimated_size <- sum(reject_null)/nsim
print(estimated_size)
rm(list = ls()) # clear the data environment
rm(list = ls()) # clear the data environment
#set.seed(124) # set the seed for generating data
TT <- 300 # number of observations
lam = 0 # determines the degree of serial correlation for y
rho = 0 # determines the degree of serial correlation for x
alpha = 0.05 # size of the t test
e1 <- as.matrix(rnorm(TT,mean = 0, sd = 1),nrow = TT, ncol = 1) # generate observations for e1 from standartd normal distribution
e2 <- as.matrix(rnorm(TT,mean = 0, sd = 1),nrow = TT, ncol = 1) # generate observations for e2 from standartd normal distribution
##########################################################
# generating observations for y_t = lam y_t-1 + e_t
##########################################################
#y_t = lamba y_t-1 + e_1t
#x_t = rho x_t-1 + e_2t
y <- matrix(data = NA, nrow = TT, ncol = 1)
for (i in 1:TT) {
if (i == 1) {
y[i] <- e1[i]
} else {
y[i] <- lam * y[i-1] + e1[i]
}
}
par(mfcol = c(2,1)) # to have multiple figures in one picture
plot(1:TT,y,type = "l", xlab='time',ylab='y')
abline(a = 0, b = 0) # Add line with zero intercept and zero slope
##########################################################
# generating observations for x_t = rho y_t-1 + e_t
##########################################################
x <- matrix(NA, nrow = TT, ncol = 1)
for (i in 1:TT) {
if (i == 1) {
x[i] <- e2[i]
} else {
x[i] <- rho * x[i-1] + e2[i]
}
}
plot(1:TT,x,type = "l",xlab='time',ylab='x')
abline(a = 0, b = 0) # Add line with zero intercept and zero slope
############################################################################
# run the regression y on x
############################################################################
beta_hat <- sum( x*y )/sum( x^2 ) # estimating the slope coefficient, beta, via OLS
res <- y - beta_hat*x # computing the residuals
sigma2_hat <- mean(res^2)
se_beta <- sqrt(sigma2_hat /sum( x^2 )) # the estimated variance of beta_hat
t_test = beta_hat/se_beta # computed t test statistics
cv = qnorm(1- alpha/2, mean = 0, sd = 1) # critial value for alpha = 0.05
reject_null = abs(t_test) > cv # takes the value of one of we reject the null and zero otherwise
print(reject_null)
rm(list = ls()) # clear the data environment
setwd("C:/Users/gordo/Desktop/Fall 2020 Classes/STAT 1331 - Financial Econometrics/In-Class Code") # set the working directory
source("generate_plus_test.R") # add functions inside the local R file named generate_plus_test
TT <- 300 # number of observations
#if lambda and rho both != 0, we have reject a lot more, when we shouldn't have!
lam <- 0.9 # determines the degree of serial correlation for y
rho <- 0.9 # determines the degree of serial correlation for x
alpha <- 0.05 # size of the t test
nsim <- 1000 # number of simulations
reject_null <- matrix(FALSE,nrow = nsim, ncol = 1)
for (i in 1:nsim) {
set.seed(124*i) # set the seed for generating data
reject_null[i] <- gen_test(TT, lam, rho, alpha)
}
estimated_size <- sum(reject_null)/nsim
print(estimated_size)
# this function generate independent data for x and y, and test the null of H0: beta = 0
# against H_a : beta ~= 0 in regression of y = beta * x + u
gen_test <- function(TT, lam, rho, alpha = 0.05){
# TT: The number of observations
# lam: determines the degree of serial correlation for y
# rho: determines the degree of serial correlation for x
# alpha: size of the t test
e1 <- as.matrix(rnorm(TT,mean = 0, sd = 1),nrow = TT, ncol = 1) # generate observations for e1 from standartd normal distribution
e2 <- as.matrix(rnorm(TT,mean = 0, sd = 1),nrow = TT, ncol = 1) # generate observations for e2 from standartd normal distribution
##########################################################
# generating observations for y_t = lam y_t-1 + e_t
##########################################################
y <- matrix(data = NA, nrow = TT, ncol = 1)
for (i in 1:TT) {
if (i == 1) {
y[i] <- e1[i]
} else {
y[i] <- lam * y[i-1] + e1[i]
}
}
##########################################################
# generating observations for x_t = rho y_t-1 + e_t
##########################################################
x <- matrix(NA, nrow = TT, ncol = 1)
for (i in 1:TT) {
if (i == 1) {
x[i] <- e2[i]
} else {
x[i] <- rho * x[i-1] + e2[i]
}
}
############################################################################
# run the regression y on x
############################################################################
beta_hat <- sum( x*y )/sum( x^2 ) # estimating the slope coefficient, beta, via OLS
res <- y - beta_hat*x # computing the residuals
sigma2_hat <- mean(res^2)
se_beta <- sqrt(sigma2_hat /sum( x^2 )) # the estimated variance of beta_hat
t_test = beta_hat/se_beta # computed t test statistics
cv = qnorm(1- alpha/2, mean = 0, sd = 1) # critial value for alpha = 0.05
obj = abs(t_test) > cv # takes the value of one of we reject the null and zero otherwise
return(obj)
}
rm(list = ls()) # clear the data environment
setwd("C:/Users/gordo/Desktop/Fall 2020 Classes/STAT 1331 - Financial Econometrics/In-Class Code") # set the working directory
source("generate_plus_test.R") # add functions inside the local R file named generate_plus_test
TT <- 300 # number of observations
#if lambda and rho both != 0, we have reject a lot more, when we shouldn't have!
lam <- 0.9 # determines the degree of serial correlation for y
rho <- 0.9 # determines the degree of serial correlation for x
alpha <- 0.05 # size of the t test
nsim <- 1000 # number of simulations
reject_null <- matrix(FALSE,nrow = nsim, ncol = 1)
for (i in 1:nsim) {
set.seed(124*i) # set the seed for generating data
reject_null[i] <- gen_test(TT, lam, rho, alpha)
}
estimated_size <- sum(reject_null)/nsim
print(estimated_size)
rm(list = ls()) # clear the data environment
setwd("C:/Users/gordo/Desktop/Fall 2020 Classes/STAT 1331 - Financial Econometrics/In-Class Code") # set the working directory
source("generate_plus_test.R") # add functions inside the local R file named generate_plus_test
TT <- 300 # number of observations
#if lambda and rho both != 0, we have reject a lot more, when we shouldn't have!
lam <- 0.9 # determines the degree of serial correlation for y
rho <- 0.9 # determines the degree of serial correlation for x
alpha <- 0.05 # size of the t test
nsim <- 1000 # number of simulations
reject_null <- matrix(FALSE,nrow = nsim, ncol = 1)
for (i in 1:nsim) {
set.seed(124*i) # set the seed for generating data
reject_null[i] <- gen_test(TT, lam, rho, alpha)
}
estimated_size <- sum(reject_null)/nsim
print(estimated_size)
1b) Suppose $x_t = \sum_{j=0}^{4}\alpha_{j}\varepsilon_{t-j}$, where $\varepsilon_{t'}$ ~ iid(0,$\sigma_\varepsilon^2$) for all t'. Show that $x_t$ is weakly stationary.
---
title: "STAT 1331 - Assignment 2"
author: "Gordon Lu"
date: "9/29/2020"
output:
pdf_document: default
html_document: default
word_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Problem 1:
Let {$x_t$ for t = ..., -2, -1, 0, 1, 2, ...} be a time series process.
1a) What does it mean when we say $x_t$ is weakly stationary?
### Solution:
For $x_t$ to be regarded as a weakly stationary process if it has constant mean and variance, and the covariance between $x_{t1}$ and $x_{t2}$ depends on $t_1$ and $t_2$ only through time distance |${t_1 - t_2}$|
1b) Suppose $x_t = \sum_{j=0}^{4}\alpha_{j}\varepsilon_{t-j}$, where $\varepsilon_{t'}$ ~ iid(0,$\sigma_\varepsilon^2$) for all t'. Show that $x_t$ is weakly stationary.
$$
\sum_{j=0}^{\infty}\alpha_{j}\alpha_{j-\tau} \leq c < \infty
$$
Thus, this will allow to say that, by linearity, that $\sum_{j=0}^{\infty}\alpha_{j}\alpha_{j-\tau} < \infty$.
Since our summation only extends to a positive constant, `n`, we can guarantee that our summation will be less than $\infty$. We can say $\alpha_j$ and $\alpha_{j-\tau}$ will be $< \infty$. Thus, we can conclude that
Thus, we have that the mean of $y_t$ = 0.
